{
	"results": [{
		"columns": ["user", "entity"],
		"data": [{
			"graph": {

				"nodes": [{
					"id": "ENTRY_POINT 0",
					"labels": ["ENTRY_POINT"],
					"properties": {
						"IRs": ""
					}
				}, {
					"id": "require(bool,string)(msg.sender == _from,line 67)",
					"labels": ["EXPRESSION"],
					"properties": {
						"IRs": "TMP_17(bool) = msg.sender == _from;TMP_19 = SOLIDITY_CALL require(bool,string)(TMP_17,line 67)"
					}
				}, {
					"id": "checkAllowance = AmazingTokenInterface(_tokenAddress).allowance(_from,address(this))",
					"labels": ["NEW VARIABLE"],
					"properties": {
						"IRs": "TMP_20 = CONVERT _tokenAddress to AmazingTokenInterface;TMP_21 = CONVERT this to address;TMP_23(uint256) = HIGH_LEVEL_CALL, dest:TMP_20(AmazingTokenInterface), function:allowance, arguments:['_from', 'TMP_21']  ;checkAllowance(uint256) := TMP_23(uint256)"
					}
				}, {
					"id": "require(bool,string)(checkAllowance == token_amount,line 71)",
					"labels": ["EXPRESSION"],
					"properties": {
						"IRs": "TMP_24(bool) = checkAllowance == token_amount;TMP_26 = SOLIDITY_CALL require(bool,string)(TMP_24,line 71)"
					}
				}, {
					"id": "AmazingTokenInterface(_tokenAddress).transferFrom(_from,address(this),checkAllowance)",
					"labels": ["EXPRESSION"],
					"properties": {
						"IRs": "TMP_27 = CONVERT _tokenAddress to AmazingTokenInterface;TMP_28 = CONVERT this to address;TMP_30(bool) = HIGH_LEVEL_CALL, dest:TMP_27(AmazingTokenInterface), function:transferFrom, arguments:['_from', 'TMP_28', 'checkAllowance']  "
					}
				}, {
					"id": "transactionInfo[_from][_to].exist == true",
					"labels": ["IF"],
					"properties": {
						"IRs": "REF_25(mapping(address => escrow.transaction)) -> transactionInfo[_from];REF_26(escrow.transaction) -> REF_25[_to];REF_27(bool) -> REF_26.exist;TMP_31(bool) = REF_27 == true;CONDITION TMP_31"
					}
				}, {
					"id": "currentTransaction = transactionInfo[_from][_to]",
					"labels": ["NEW VARIABLE"],
					"properties": {
						"IRs": "REF_28(mapping(address => escrow.transaction)) -> transactionInfo[_from];REF_29(escrow.transaction) -> REF_28[_to];currentTransaction(escrow.transaction) := REF_29(escrow.transaction)"
					}
				}, {
					"id": "currentTransaction.addressToken = _tokenAddress",
					"labels": ["EXPRESSION"],
					"properties": {
						"IRs": "REF_30(address) -> currentTransaction.addressToken;REF_30 (->currentTransaction) := _tokenAddress(address)"
					}
				}, {
					"id": "currentTransaction.token_amount = checkAllowance",
					"labels": ["EXPRESSION"],
					"properties": {
						"IRs": "REF_31(uint256) -> currentTransaction.token_amount;REF_31 (->currentTransaction) := checkAllowance(uint256)"
					}
				}, {
					"id": "currentTransaction.approve_Token = true",
					"labels": ["EXPRESSION"],
					"properties": {
						"IRs": "REF_32(bool) -> currentTransaction.approve_Token;REF_32 (->currentTransaction) := true(string)"
					}
				}, {
					"id": "currentTransaction.approve_Eth == true && currentTransaction.approve_Token == true",
					"labels": ["IF"],
					"properties": {
						"IRs": "REF_33(bool) -> currentTransaction.approve_Eth;TMP_32(bool) = REF_33 == true;REF_34(bool) -> currentTransaction.approve_Token;TMP_33(bool) = REF_34 == true;TMP_34(bool) = TMP_32 && TMP_33;CONDITION TMP_34"
					}
				}, {
					"id": "AmazingTokenInterface(_tokenAddress).transfer(currentTransaction.sendEthAddress,currentTransaction.token_amount)",
					"labels": ["EXPRESSION"],
					"properties": {
						"IRs": "TMP_35 = CONVERT _tokenAddress to AmazingTokenInterface;REF_36(address) -> currentTransaction.sendEthAddress;REF_37(uint256) -> currentTransaction.token_amount;TMP_37(bool) = HIGH_LEVEL_CALL, dest:TMP_35(AmazingTokenInterface), function:transfer, arguments:['REF_36', 'REF_37']  "
					}
				}, {
					"id": "TokenerAddress = currentTransaction.sendTokenAddress",
					"labels": ["NEW VARIABLE"],
					"properties": {
						"IRs": "REF_38(address) -> currentTransaction.sendTokenAddress;TokenerAddress(address) := REF_38(address)"
					}
				}, {
					"id": "TokenerAddress.transfer(currentTransaction.eth_amount)",
					"labels": ["EXPRESSION"],
					"properties": {
						"IRs": "REF_40(uint256) -> currentTransaction.eth_amount;Transfer dest:TokenerAddress value:REF_40"
					}
				}, {
					"id": "currentTransaction.eth_amount = 0",
					"labels": ["EXPRESSION"],
					"properties": {
						"IRs": "REF_41(uint256) -> currentTransaction.eth_amount;REF_41 (->currentTransaction) := 0(uint256)"
					}
				}, {
					"id": "currentTransaction.token_amount = 0",
					"labels": ["EXPRESSION"],
					"properties": {
						"IRs": "REF_42(uint256) -> currentTransaction.token_amount;REF_42 (->currentTransaction) := 0(uint256)"
					}
				}, {
					"id": "currentTransaction.exist = false",
					"labels": ["EXPRESSION"],
					"properties": {
						"IRs": "REF_43(bool) -> currentTransaction.exist;REF_43 (->currentTransaction) := false(string)"
					}
				}, {
					"id": "END_IF 17",
					"labels": ["END_IF"],
					"properties": {
						"IRs": ""
					}
				}, {
					"id": "newTransaction = transaction(_to,_from,0,token_amount,true,false,true,_tokenAddress)",
					"labels": ["NEW VARIABLE"],
					"properties": {
						"IRs": "TMP_41 = new transaction(_to,_from,0,token_amount,true,false,true,_tokenAddress);newTransaction(escrow.transaction) := TMP_41(escrow.transaction)"
					}
				}, {
					"id": "transactionInfo[_from][_to] = newTransaction",
					"labels": ["EXPRESSION"],
					"properties": {
						"IRs": "REF_44(mapping(address => escrow.transaction)) -> transactionInfo[_from];REF_45(escrow.transaction) -> REF_44[_to];REF_45 (->transactionInfo) := newTransaction(escrow.transaction)"
					}
				}, {
					"id": "transactionInfo[_to][_from] = newTransaction",
					"labels": ["EXPRESSION"],
					"properties": {
						"IRs": "REF_46(mapping(address => escrow.transaction)) -> transactionInfo[_to];REF_47(escrow.transaction) -> REF_46[_from];REF_47 (->transactionInfo) := newTransaction(escrow.transaction)"
					}
				}, {
					"id": "END_IF 21",
					"labels": ["END_POINT"],
					"properties": {
						"IRs": ""
					}
				}],
				"relationships": [{
					"id": "1",
					"startNode": "ENTRY_POINT 0",
					"endNode": "require(bool,string)(msg.sender == _from,line 67)"
				}, {
					"id": "2",
					"startNode": "require(bool,string)(msg.sender == _from,line 67)",
					"endNode": "checkAllowance = AmazingTokenInterface(_tokenAddress).allowance(_from,address(this))"
				}, {
					"id": "3",
					"startNode": "checkAllowance = AmazingTokenInterface(_tokenAddress).allowance(_from,address(this))",
					"endNode": "require(bool,string)(checkAllowance == token_amount,line 71)"
				}, {
					"id": "4",
					"startNode": "require(bool,string)(checkAllowance == token_amount,line 71)",
					"endNode": "AmazingTokenInterface(_tokenAddress).transferFrom(_from,address(this),checkAllowance)"
				}, {
					"id": "5",
					"startNode": "AmazingTokenInterface(_tokenAddress).transferFrom(_from,address(this),checkAllowance)",
					"endNode": "transactionInfo[_from][_to].exist == true"
				}, {
					"id": "6",
					"startNode": "transactionInfo[_from][_to].exist == true",
					"endNode": "currentTransaction = transactionInfo[_from][_to]",
					"type": "IF"
				}, {
					"id": "7",
					"startNode": "transactionInfo[_from][_to].exist == true",
					"endNode": "newTransaction = transaction(_to,_from,0,token_amount,true,false,true,_tokenAddress)",
					"type": "IF"
				}, {
					"id": "8",
					"startNode": "currentTransaction = transactionInfo[_from][_to]",
					"endNode": "currentTransaction.addressToken = _tokenAddress"
				}, {
					"id": "9",
					"startNode": "currentTransaction.addressToken = _tokenAddress",
					"endNode": "currentTransaction.token_amount = checkAllowance"
				}, {
					"id": "10",
					"startNode": "currentTransaction.token_amount = checkAllowance",
					"endNode": "currentTransaction.approve_Token = true"
				}, {
					"id": "11",
					"startNode": "currentTransaction.approve_Token = true",
					"endNode": "currentTransaction.approve_Eth == true && currentTransaction.approve_Token == true"
				}, {
					"id": "12",
					"startNode": "currentTransaction.approve_Eth == true && currentTransaction.approve_Token == true",
					"endNode": "AmazingTokenInterface(_tokenAddress).transfer(currentTransaction.sendEthAddress,currentTransaction.token_amount)",
					"type": "IF"
				}, {
					"id": "13",
					"startNode": "currentTransaction.approve_Eth == true && currentTransaction.approve_Token == true",
					"endNode": "END_IF 17",
					"type": "IF"
				}, {
					"id": "14",
					"startNode": "AmazingTokenInterface(_tokenAddress).transfer(currentTransaction.sendEthAddress,currentTransaction.token_amount)",
					"endNode": "TokenerAddress = currentTransaction.sendTokenAddress"
				}, {
					"id": "15",
					"startNode": "TokenerAddress = currentTransaction.sendTokenAddress",
					"endNode": "TokenerAddress.transfer(currentTransaction.eth_amount)"
				}, {
					"id": "16",
					"startNode": "TokenerAddress.transfer(currentTransaction.eth_amount)",
					"endNode": "currentTransaction.eth_amount = 0"
				}, {
					"id": "17",
					"startNode": "currentTransaction.eth_amount = 0",
					"endNode": "currentTransaction.token_amount = 0"
				}, {
					"id": "18",
					"startNode": "currentTransaction.token_amount = 0",
					"endNode": "currentTransaction.exist = false"
				}, {
					"id": "19",
					"startNode": "currentTransaction.exist = false",
					"endNode": "END_IF 17"
				}, {
					"id": "20",
					"startNode": "END_IF 17",
					"endNode": "END_IF 21"
				}, {
					"id": "21",
					"startNode": "newTransaction = transaction(_to,_from,0,token_amount,true,false,true,_tokenAddress)",
					"endNode": "transactionInfo[_from][_to] = newTransaction"
				}, {
					"id": "22",
					"startNode": "transactionInfo[_from][_to] = newTransaction",
					"endNode": "transactionInfo[_to][_from] = newTransaction"
				}, {
					"id": "23",
					"startNode": "transactionInfo[_to][_from] = newTransaction",
					"endNode": "END_IF 21"
				}]
			}
		}]
	}],
	"errors": []
}